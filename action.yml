name: Install and cache APT packages
description: Cache APT packages to speed up your workflows

inputs:
  packages:
    description: APT packages to install
    required: true
  update:
    description: Update package lists before installing
    default: true
  cache:
    description: Cache the downloaded packages
    default: true
  install-recommends:
    description: Install recommended packages
    default: true
  install-suggests:
    description: Install suggested packages
    default: false
  upgrade:
    description: Upgrade packages if already installed
    default: true

branding:
  icon: package
  color: orange

runs:
  using: "composite"
  steps:
    - name: Prepare apt command
      id: apt
      run: |
        flags="--yes \
          ${{ inputs.install-recommends != 'true' && '--no-install-recommends' || '' }} \
          ${{ inputs.install-suggests =='true' && '--install-suggests' || '' }} \
          ${{ inputs.upgrade != 'true' && '--no-upgrade' || '' }}"
        echo "flags=$flags" >> $GITHUB_OUTPUT

        packages="${{ inputs.packages }}"
        packages="${packages//$'\n'/ }"
        echo "packages=$packages" >> $GITHUB_OUTPUT
      shell: bash
    - name: Check if packages are already installed
      id: check-installed
      if: inputs.upgrade != 'true'
      run: |
        if dpkg -l ${{ steps.apt.outputs.packages }}; then
          echo "all-installed=true" >> $GITHUB_OUTPUT
        else
          echo "all-installed=false" >> $GITHUB_OUTPUT
        fi
      shell: bash
    - name: Update package lists
      if: steps.check-installed.outputs.all-installed != 'true' && inputs.update == 'true'
      run: |
        sudo() {
          if [ $(id -u) -eq 0 ]; then
            "$@"
          else
            command sudo "$@"
          fi
        }

        export DEBIAN_FRONTEND=noninteractive
        sudo apt-get update
      shell: bash
    - name: Save package list
      if: steps.check-installed.outputs.all-installed != 'true' && inputs.cache == 'true'
      run: |
        sudo() {
          if [ $(id -u) -eq 0 ]; then
            "$@"
          else
            command sudo "$@"
          fi
        }

        mkdir .apt-install

        export DEBIAN_FRONTEND=noninteractive
        sudo apt-get install \
          ${{ steps.apt.outputs.flags }} \
          --dry-run \
          ${{ steps.apt.outputs.packages }} \
        | { grep '^Inst' || true; } \
        | sed 's/^Inst //' \
        | sort \
        > .apt-install/versions.txt

        awk '{print $1}' .apt-install/versions.txt > .apt-install/packages.txt
      shell: bash
    - name: Get OS version
      id: os-version
      if: steps.check-installed.outputs.all-installed != 'true' && inputs.cache == 'true'
      uses: sersoft-gmbh/os-version-action@v3
    - name: Restore cache
      if: steps.check-installed.outputs.all-installed != 'true' &&  inputs.cache == 'true'
      id: cache
      uses: actions/cache/restore@v4
      with:
        path: .apt-install/packages
        key: apt-install-${{ runner.arch }}-${{ steps.os-version.outputs.version }}-${{ hashFiles('.apt-install/packages.txt') }}-${{ hashFiles('.apt-install/versions.txt') }}
        restore-keys: |
          apt-install-${{ runner.arch }}-${{ steps.os-version.outputs.version }}-${{ hashFiles('.apt-install/packages.txt') }}-
    - name: Download packages
      if: steps.check-installed.outputs.all-installed != 'true' && inputs.cache == 'true' && steps.cache.outputs.cache-hit != 'true'
      run: |
        mkdir .apt-install/packages
        cd .apt-install/packages
        touch versions.txt

        comm -23 ../versions.txt versions.txt | awk '{print $1}' > downloads.txt
        cat downloads.txt | xargs -I {} rm -f {}_*.deb
        [ ! -s downloads.txt ] || apt-get download $(cat downloads.txt) || true

        cp ../versions.txt versions.txt
        rm -f downloads.txt
      shell: bash
    - name: Save cache
      if: steps.check-installed.outputs.all-installed != 'true' && inputs.cache == 'true' && steps.cache.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: .apt-install/packages
        key: ${{ steps.cache.outputs.cache-primary-key }}
    - name: Install cached packages
      if: steps.check-installed.outputs.all-installed != 'true' && inputs.cache == 'true'
      run: |
        sudo() {
          if [ $(id -u) -eq 0 ]; then
            "$@"
          else
            command sudo "$@"
          fi
        }

        export DEBIAN_FRONTEND=noninteractive
        sudo dpkg -Ri .apt-install/packages || true
        sudo apt-get install --fix-broken --yes
      shell: bash
    - name: Clean up
      if: steps.check-installed.outputs.all-installed != 'true' && inputs.cache == 'true'
      run: rm -rf .apt-install
      shell: bash
    - name: Install uncached packages
      if: steps.check-installed.outputs.all-installed != 'true' && inputs.cache != 'true'
      run: |
        sudo() {
          if [ $(id -u) -eq 0 ]; then
            "$@"
          else
            command sudo "$@"
          fi
        }

        export DEBIAN_FRONTEND=noninteractive
        sudo apt-get install \
          ${{ steps.apt.outputs.flags }} \
          ${{ steps.apt.outputs.packages }}
      shell: bash
