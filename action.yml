name: Install and cache APT packages
description: Cache APT packages to speed up your workflows

inputs:
  packages:
    description: APT packages to install
    required: true
  cache:
    description: Cache the downloaded packages
    default: true
  install-recommends:
    description: Install recommended packages
    default: true
  install-suggests:
    description: Install suggested packages
    default: false
  update:
    description: Update package lists before installing
    default: true
  upgrade:
    description: Upgrade packages if already installed
    default: true

branding:
  icon: package
  color: orange

runs:
  using: "composite"
  steps:
    - name: Begin
      id: pre
      run: |
        sudo() {
          if [ $(id -u) -eq 0 ]; then
            "$@"
          else
            command sudo "$@"
          fi
        }

        export DEBIAN_FRONTEND=noninteractive

        flags="--yes \
          ${{ inputs.install-recommends != 'true' && '--no-install-recommends' || '' }} \
          ${{ inputs.install-suggests =='true' && '--install-suggests' || '' }} \
          ${{ inputs.upgrade != 'true' && '--no-upgrade' || '' }}"

        packages="${{ inputs.packages }}"
        packages="${packages//$'\n'/ }"

        echo "os-version=$(sed -ne 's/^VERSION_CODENAME=//p' /etc/os-release)" >> $GITHUB_OUTPUT

        if [ ${{ inputs.upgrade }} != 'true' ]; then
          echo ::group::Check if packages are already installed
          to_install=$(sudo apt-get install \
            $flags \
            --dry-run \
            $packages \
          | { grep '^Inst' || true; } \
          || echo "error" )
          echo ::endgroup::
          if [ -z "$to_install" ]; then
            echo "done=true" >> $GITHUB_OUTPUT
            exit 0
          fi
        fi

        if [ ${{ inputs.update }} == 'true' ]; then
          echo ::group::Update package lists
          sudo apt-get update
          echo ::endgroup::
        fi

        if [ ${{ inputs.cache }} == 'true' ]; then
          echo ::group::Get list of packages to install
          mkdir .apt-install

          sudo apt-get install \
            $flags \
            --dry-run \
            $packages \
          | { grep '^Inst' || true; } \
          | sed 's/^Inst //' \
          | sort \
          > .apt-install/versions.txt

          awk '{print $1}' .apt-install/versions.txt > .apt-install/packages.txt
          
          cat .apt-install/versions.txt
          echo ::endgroup::
          if [ -s .apt-install/versions.txt ]; then
            echo "done=false" >> $GITHUB_OUTPUT
          else
            echo "done=true" >> $GITHUB_OUTPUT
          fi
        else
          echo ::group::Install packages without caching
          sudo apt-get install \
            $flags \
            $packages
          echo ::endgroup::
          echo "done=true" >> $GITHUB_OUTPUT
        fi
      shell: bash
    - name: Restore cache
      if: steps.pre.outputs.done != 'true'
      id: cache
      uses: actions/cache/restore@v4
      with:
        path: .apt-install/packages
        key: apt-install-${{ runner.arch }}-${{ steps.pre.outputs.os-version }}-${{ hashFiles('.apt-install/packages.txt') }}-${{ hashFiles('.apt-install/versions.txt') }}
        restore-keys: |
          apt-install-${{ runner.arch }}-${{ steps.pre.outputs.os-version }}-${{ hashFiles('.apt-install/packages.txt') }}-
    - name: Download packages
      if: steps.pre.outputs.done != 'true' && steps.cache.outputs.cache-hit != 'true'
      run: |
        echo ::group::Download packages to cache
        mkdir .apt-install/packages
        cd .apt-install/packages
        touch versions.txt

        comm -23 ../versions.txt versions.txt | awk '{print $1}' > downloads.txt
        xargs -I {} rm -f {}_*.deb < downloads.txt
        [ ! -s downloads.txt ] || apt-get download $(cat downloads.txt)

        cp ../versions.txt versions.txt
        rm -f downloads.txt
        echo ::endgroup::
      shell: bash
    - name: Save cache
      if: steps.pre.outputs.done != 'true' && steps.cache.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: .apt-install/packages
        key: ${{ steps.cache.outputs.cache-primary-key }}
    - name: Install cached packages
      if: steps.pre.outputs.done != 'true'
      run: |
        sudo() {
          if [ $(id -u) -eq 0 ]; then
            "$@"
          else
            command sudo "$@"
          fi
        }

        export DEBIAN_FRONTEND=noninteractive

        echo ::group::Install cached packages
        while ! sudo dpkg --install --recursive --skip-same-version .apt-install/packages; do
          :
        done
        echo ::endgroup::
      shell: bash
    - name: Clean up
      if: steps.pre.outputs.done != 'true' && always()
      run: rm -rf .apt-install
      shell: bash
